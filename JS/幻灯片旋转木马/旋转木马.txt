幻灯片旋转木马

思路：
1、DOM结构编写
2、CSS样式初始化
3、JS+JQ搭建基础开发结构
4、分析需要操作的DOM节点
5、分析位置关系
6、初始化位置函数
7、左右旋转函数

3、JS+JQ搭建基础开发结构
页面中加载函数
定义一个carousel的类，获取到$('J_Poster').eq(0)
将这个类在carousel.js中进行封装。首先要用匿名函数，封装在一个闭包里面，
（其实就是先定义一个闭包，原因是：由于js中没有块级作用域，这种方式可以防止变量被污染，然后把jQuery对象传进去；以便闭包内function函数去接收$,然后闭包内再定义一个名为Carousel的函数，其实就是构造函数，由于构造函数的弊端：方法不能共用，所以在Carousel函数的原型property对象上定义方法，这样方法就可以公用了，这种原型构造函数模式就完成了，相当于其他语言的类，最后将这个函数绑定到window对象上就可以全局调用了，就相当于window.alert;用到的时候可以去new这个类，看不懂的同学可以了解下设计模式，看相关的js书籍。）
在插件之前加分号，以免之前文件缺少分号而报错；
为了避免出现多个实例需要new多次，所以定义init()初始化函数，
设置初始化配置参数：
1、poster-main区域需要人为设置宽高，第一帧左右居中，计算left值
var setting ={
	width:1000,
	height:290,
	postWidth:550,
	postHeight:290,
	scale:0.9 //图片间的大小比例
	speed:500 //切换速度
	verticalAlign:"middle",
        
}将配置参数配置到节点属性上去
2、建立默认配置参数，定义setting
3、获取人工配置参数
   获取poster节点的data-setting属性
   使用parseJSON转换成json格式,为了容错，需要判断节点，若存在且不为空说明有人工配置参数，转换为JSON,若不是，置空。

设置基本参数值
定义设置参数值函数
1、设置幻灯片展示区域的宽高
2、设置展示区域下UL的宽高
3、设置上下按钮宽度，（总宽度-第一帧宽度）/2
4、设置第一帧的left值=按钮宽度
5、设置按钮、第一帧的Z-index，（假设有7张）
   按钮的z-index为所有帧数/2向上取整，为4，
   第一帧的z-index为所有帧数/2向下取整,为3,
6、设置右边帧的参数
   获取第一个li之后的所有li,使用.slice(1)函数
   获取左右两边的级数，level=Math.floor(this.posterItems.size()/2);
   计算右边每帧之间的间隙，为右边按钮的宽度除以级数设为gap
   取出第二到第四个li放到右边slice(0,level)
   对右边的帧进行遍历，并且设置参数
   $(this).css({
	z-index: 为level--后的值
	width:   postWidth*scale
	height:  postHeight*scale
	opacity: 1/(++i)
	left:   第一帧left+postWidth+gap*i-当前帧宽度
	top:	设置函数，选择置顶置地或居中  
})
7、设置左边帧参数，与右边帧计算方式相反

设置旋转功能
1、设置左旋转
   原理：把当前帧的上一帧参数取出，设置给当前帧，需要判断是否为第一帧（不太懂），若是，将最后一帧参数设置进去，需要用到.prev()和animate()函数。
2、右旋转，使用.next()函数，若为最后一帧，将第一帧参数传递过去   
3、存在的bug
   (1)、在旋转时，z-index通过animate设置需要时间，会导致一帧设置好，另一帧还没消失。
需要设置 z-index数组，将下一帧或者前一帧的  z-index .push()进数组，单独循环的时候直接通过.css()来设置
  （2）、点击过快时会乱掉，因为点击过快加载不流畅，需要设置标志flag,默认为ture,当点击时，立即置为false，点击结束后参数设置好后重置为ture

设置自动播放功能
使用js原生中的setinterval和clearinterval函数。鼠标移出时设置setinterval(),启动自动播放函数，即间隔的点击右按钮，移入时清楚定时器。
存在问题：1、旋转时，去了前一帧参数设置给当前帧，那么下一帧的参数设置时前一帧参数已经改变
	  
注意：
  1、each循环是需要提前保存this，否则会发生漂移   
  2、自动播放时，使用window.onload需要保存this